// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PJ_SEM03.Models;

#nullable disable

namespace PJ_SEM03.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240202161249_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Cart", b =>
                {
                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("product_quantity")
                        .HasColumnType("int");

                    b.HasKey("product_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            product_id = 1,
                            user_id = "1",
                            product_quantity = 2
                        },
                        new
                        {
                            product_id = 2,
                            user_id = "2",
                            product_quantity = 1
                        },
                        new
                        {
                            product_id = 3,
                            user_id = "3",
                            product_quantity = 3
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Feedback", b =>
                {
                    b.Property<int>("feedback_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedback_id"));

                    b.Property<string>("feedback_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("feedback_rating")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("feedback_id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            feedback_id = 1,
                            feedback_description = "Good Service",
                            feedback_rating = 5,
                            product_id = 1,
                            user_id = "1"
                        },
                        new
                        {
                            feedback_id = 2,
                            feedback_description = "Great",
                            feedback_rating = 5,
                            product_id = 3,
                            user_id = "2"
                        },
                        new
                        {
                            feedback_id = 3,
                            feedback_description = "Good product!",
                            feedback_rating = 5,
                            product_id = 5,
                            user_id = "3"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.GiftCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplyFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("giftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("percentReduce")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GiftCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplyFor = "Medical, Education, Scientific",
                            Describe = "Reduce 5%",
                            giftName = "Welcome",
                            percentReduce = 5
                        },
                        new
                        {
                            Id = 2,
                            ApplyFor = "Medical, Education, Scientific",
                            Describe = "Reduce 10%",
                            giftName = "Goodbye",
                            percentReduce = 10
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_id"));

                    b.Property<int?>("AppliedGiftCodeId")
                        .HasColumnType("int");

                    b.Property<string>("order_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("order_datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("order_note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order_total")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("order_id");

                    b.HasIndex("AppliedGiftCodeId");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            order_id = 1,
                            order_address = "HCM",
                            order_code = "ORD001",
                            order_datetime = new DateTime(2024, 2, 2, 23, 12, 48, 25, DateTimeKind.Local).AddTicks(1995),
                            order_note = "Note 1",
                            order_phone = "123",
                            order_status = "Processing",
                            order_total = 100,
                            user_id = "1"
                        },
                        new
                        {
                            order_id = 2,
                            order_address = "Ca Mau",
                            order_code = "ORD001",
                            order_datetime = new DateTime(2024, 2, 2, 23, 12, 48, 25, DateTimeKind.Local).AddTicks(2014),
                            order_note = "Note 2",
                            order_phone = "124",
                            order_status = "Delivered",
                            order_total = 200,
                            user_id = "2"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.OrderDetail", b =>
                {
                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("product_quantity")
                        .HasColumnType("int");

                    b.HasKey("product_id", "order_id");

                    b.HasIndex("order_id");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            product_id = 1,
                            order_id = 1,
                            product_quantity = 2
                        },
                        new
                        {
                            product_id = 3,
                            order_id = 1,
                            product_quantity = 3
                        },
                        new
                        {
                            product_id = 2,
                            order_id = 2,
                            product_quantity = 4
                        },
                        new
                        {
                            product_id = 4,
                            order_id = 2,
                            product_quantity = 1
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_id"));

                    b.Property<int?>("GiftCodeId")
                        .HasColumnType("int");

                    b.Property<string>("product_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_percent")
                        .HasColumnType("int");

                    b.Property<int>("product_price")
                        .HasColumnType("int");

                    b.Property<int>("product_quantity")
                        .HasColumnType("int");

                    b.Property<int>("product_star")
                        .HasColumnType("int");

                    b.Property<string>("product_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("product_id");

                    b.HasIndex("GiftCodeId");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            product_id = 1,
                            product_description = "What is Costar Evening Primrose Oil? Uses and correct usage\nCostar Evening Primrose Oil is a health care product extracted from evening primrose essential oil. Supports anti-oxidation and reduces symptoms of hot flashes in postmenopausal and premenopausal women. This article will introduce more information about the ingredients, uses, usage and intended users of Costar pills",
                            product_img = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P17315_1.jpg",
                            product_name = "Costar Evening Primrose Oil",
                            product_percent = 10,
                            product_price = 90,
                            product_quantity = 10,
                            product_star = 5,
                            product_type = "Medical"
                        },
                        new
                        {
                            product_id = 2,
                            product_description = "The Bresser Science ETD-201 is a high-quality stereo microscope with transmitted and incident light. It is ideally suited for use in schools and universities as well as for the training of apprentices and in the field of electronics. The 360° rotatable binocular head allows comfortable viewing for both left and right-handed users. The magnification range of 20x to 80x can be extended with the included Barlow lens to 40x to 160x. The LED lighting is continuously dimmable and can be operated with batteries or the included power supply. The microscope is equipped with a 2x and 4x objective and a pair of 10x wide field eyepieces. The interpupillary distance and diopter adjustment are individually adjustable. The microscope is supplied with a dust cover and 5 prepared slides.",
                            product_img = "https://maykhoahoc.com/images/thumbnails/550/450/detailed/4/tu-bao-quan-thuoc-duoc-lieu-vacxin-haier-hbc-260-gia-re.jpg",
                            product_name = "Bresser Science ETD-201",
                            product_percent = 20,
                            product_price = 100,
                            product_quantity = 10,
                            product_star = 4,
                            product_type = "Scientific"
                        },
                        new
                        {
                            product_id = 3,
                            product_description = "Description1",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Course 2",
                            product_percent = 10,
                            product_price = 30,
                            product_quantity = 10,
                            product_star = 5,
                            product_type = "Education"
                        },
                        new
                        {
                            product_id = 4,
                            product_description = "What is Costar Evening Primrose Oil? Uses and correct usage\nCostar Evening Primrose Oil is a health care product extracted from evening primrose essential oil. Supports anti-oxidation and reduces symptoms of hot flashes in postmenopausal and premenopausal women. This article will introduce more information about the ingredients, uses, usage and intended users of Costar pills",
                            product_img = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P17480_1.jpg",
                            product_name = "Acetylcystein",
                            product_percent = 50,
                            product_price = 90,
                            product_quantity = 10,
                            product_star = 5,
                            product_type = "Medical"
                        },
                        new
                        {
                            product_id = 5,
                            product_description = "The Bresser Science ETD-201 is a high-quality stereo microscope with transmitted and incident light. It is ideally suited for use in schools and universities as well as for the training of apprentices and in the field of electronics. The 360° rotatable binocular head allows comfortable viewing for both left and right-handed users. The magnification range of 20x to 80x can be extended with the included Barlow lens to 40x to 160x. The LED lighting is continuously dimmable and can be operated with batteries or the included power supply. The microscope is equipped with a 2x and 4x objective and a pair of 10x wide field eyepieces. The interpupillary distance and diopter adjustment are individually adjustable. The microscope is supplied with a dust cover and 5 prepared slides.",
                            product_img = "https://maykhoahoc.com/images/thumbnails/550/450/detailed/4/tu-bao-quan-vacxine-thuoc-haier-hbc-150-gia-re.png",
                            product_name = "Adapter (LEN)",
                            product_percent = 15,
                            product_price = 100,
                            product_quantity = 10,
                            product_star = 4,
                            product_type = "Scientific"
                        },
                        new
                        {
                            product_id = 6,
                            product_description = "Description1",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Course 1",
                            product_percent = 0,
                            product_price = 30,
                            product_quantity = 10,
                            product_star = 0,
                            product_type = "Education"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("user_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_fullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            AvatarUrl = "https://robohash.org/mail@ashallendesign.co.uk",
                            ConcurrencyStamp = "49f8bdc7-de4c-485c-ac82-a191f45cbc9a",
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBV4/fvXLcmXSUb3+x0TdDgzxSEiFCyTrOPpPv72uLYbHP18vjdO/EyJ3dtwGPI7qQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "ad83b057-aef3-4cde-bdd7-5a9c8deb0dca",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            user_address = "Ho Chi Minh",
                            user_fullName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            AvatarUrl = "https://api.dicebear.com/7.x/adventurer-neutral/svg?seed=mail@ashallendesign.co.uk",
                            ConcurrencyStamp = "0a8333ea-e748-4962-aa1b-83bb8e2ad04b",
                            Email = "phat@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHMSzcDSEu5kizysD4ymu3OYqdxabUD98IV81kIABm+wTXq2kRBPYbdEeeDiKLqRiA==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "f932477a-fa15-41c5-bd95-f1bdfd58dd95",
                            TwoFactorEnabled = false,
                            UserName = "phat",
                            user_address = "Quan 2, HCM",
                            user_fullName = "Ngo Thinh Phat"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            AvatarUrl = "https://api.dicebear.com/7.x/adventurer-neutral/svg?seed=mail@ashallendesign.co.uk",
                            ConcurrencyStamp = "a2be05c3-356a-4f1c-991c-eef972a7d39c",
                            Email = "khai@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOIc/6aq57lH5vgVuBKk12iozt8DfNmbuuHsDCk/SIej5rmHmppZgwr4qEKjRwf1Yg==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "377a5064-c921-4afe-93d9-56db1a07d4f5",
                            TwoFactorEnabled = false,
                            UserName = "khai",
                            user_address = "Tan Binh, HCM",
                            user_fullName = "Bui Tuan Khai"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            AvatarUrl = "https://api.dicebear.com/7.x/adventurer-neutral/svg?seed=mail@ashallendesign.co.uk",
                            ConcurrencyStamp = "48d07563-afde-425b-b02d-4fb82e9a2a5d",
                            Email = "tram@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEI+mI04WeBkhV3TSpM9gJAlwFrpZVvoESAYUyUTaVROFURQjqSTwuPpnMu5nH7L+Pg==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "cff95013-9a7b-4539-9b3b-4f4b5dcc707f",
                            TwoFactorEnabled = false,
                            UserName = "tram",
                            user_address = "Thu Duc, HCM",
                            user_fullName = "Tran Bao Huyen Tram"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Education", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("edu_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("edu_id")
                        .HasColumnType("int");

                    b.Property<string>("edu_subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edu_teacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Medical", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("med_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("med_id")
                        .HasColumnType("int");

                    b.Property<string>("med_sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("med_uses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Medicals", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Scientific", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("sci_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sci_id")
                        .HasColumnType("int");

                    b.Property<string>("sci_uses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Scientifics", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Cart", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Feedback", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", "product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.User", "user")
                        .WithMany("Feedbacks")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.HasOne("PJ_SEM03.Models.GiftCode", "AppliedGiftCode")
                        .WithMany()
                        .HasForeignKey("AppliedGiftCodeId");

                    b.HasOne("PJ_SEM03.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppliedGiftCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PJ_SEM03.Models.OrderDetail", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Product", b =>
                {
                    b.HasOne("PJ_SEM03.Models.GiftCode", "GiftCode")
                        .WithMany()
                        .HasForeignKey("GiftCodeId");

                    b.Navigation("GiftCode");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Education", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Education", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Medical", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Medical", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Scientific", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Scientific", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PJ_SEM03.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
