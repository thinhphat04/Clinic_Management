// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PJ_SEM03.Models;

#nullable disable

namespace PJ_SEM03.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240125083919_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            CartId = 2,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            CartId = 2,
                            ProductId = 2,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.CartItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Feedback", b =>
                {
                    b.Property<int>("feedback_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedback_id"));

                    b.Property<string>("feedback_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("feedback_rating")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("feedback_id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            feedback_id = 1,
                            feedback_description = "Good Service",
                            feedback_rating = 5,
                            product_id = 1,
                            user_id = "1"
                        },
                        new
                        {
                            feedback_id = 2,
                            feedback_description = "Great",
                            feedback_rating = 5,
                            product_id = 2,
                            user_id = "2"
                        },
                        new
                        {
                            feedback_id = 3,
                            feedback_description = "Good product!",
                            feedback_rating = 5,
                            product_id = 2,
                            user_id = "1"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("order_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("order_datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("order_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order_total")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("order_id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            order_id = 1,
                            CartId = 1,
                            order_address = "123 Street, City, Country",
                            order_code = "ORD123",
                            order_datetime = new DateTime(2024, 1, 25, 15, 39, 19, 182, DateTimeKind.Local).AddTicks(6690),
                            order_phone = "1234567890",
                            order_status = "Processing",
                            order_total = 290,
                            user_id = "1"
                        },
                        new
                        {
                            order_id = 2,
                            CartId = 0,
                            order_address = "456 Avenue, City, Country",
                            order_code = "ORD456",
                            order_datetime = new DateTime(2024, 1, 25, 15, 39, 19, 182, DateTimeKind.Local).AddTicks(6722),
                            order_phone = "0987654321",
                            order_status = "Delivered",
                            order_total = 100,
                            user_id = "2"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.OrderDetail", b =>
                {
                    b.Property<int>("order_detail_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_detail_id"));

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("order_price")
                        .HasColumnType("int");

                    b.Property<int>("order_quantity")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.HasKey("order_detail_id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_id"));

                    b.Property<string>("product_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_price")
                        .HasColumnType("int");

                    b.Property<int>("product_quantity")
                        .HasColumnType("int");

                    b.Property<string>("product_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("product_id");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            product_id = 1,
                            product_description = "What is Costar Evening Primrose Oil? Uses and correct usage\nCostar Evening Primrose Oil is a health care product extracted from evening primrose essential oil. Supports anti-oxidation and reduces symptoms of hot flashes in postmenopausal and premenopausal women. This article will introduce more information about the ingredients, uses, usage and intended users of Costar pills",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Costar Evening Primrose Oil",
                            product_price = 90,
                            product_quantity = 10,
                            product_type = "Medical"
                        },
                        new
                        {
                            product_id = 2,
                            product_description = "The Bresser Science ETD-201 is a high-quality stereo microscope with transmitted and incident light. It is ideally suited for use in schools and universities as well as for the training of apprentices and in the field of electronics. The 360° rotatable binocular head allows comfortable viewing for both left and right-handed users. The magnification range of 20x to 80x can be extended with the included Barlow lens to 40x to 160x. The LED lighting is continuously dimmable and can be operated with batteries or the included power supply. The microscope is equipped with a 2x and 4x objective and a pair of 10x wide field eyepieces. The interpupillary distance and diopter adjustment are individually adjustable. The microscope is supplied with a dust cover and 5 prepared slides.",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Bresser Science ETD-201",
                            product_price = 100,
                            product_quantity = 10,
                            product_type = "Scientific"
                        },
                        new
                        {
                            product_id = 3,
                            product_description = "Description1",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Course 2",
                            product_price = 30,
                            product_quantity = 10,
                            product_type = "Education"
                        },
                        new
                        {
                            product_id = 4,
                            product_description = "What is Costar Evening Primrose Oil? Uses and correct usage\nCostar Evening Primrose Oil is a health care product extracted from evening primrose essential oil. Supports anti-oxidation and reduces symptoms of hot flashes in postmenopausal and premenopausal women. This article will introduce more information about the ingredients, uses, usage and intended users of Costar pills",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Acetylcystein",
                            product_price = 90,
                            product_quantity = 10,
                            product_type = "Medical"
                        },
                        new
                        {
                            product_id = 5,
                            product_description = "The Bresser Science ETD-201 is a high-quality stereo microscope with transmitted and incident light. It is ideally suited for use in schools and universities as well as for the training of apprentices and in the field of electronics. The 360° rotatable binocular head allows comfortable viewing for both left and right-handed users. The magnification range of 20x to 80x can be extended with the included Barlow lens to 40x to 160x. The LED lighting is continuously dimmable and can be operated with batteries or the included power supply. The microscope is equipped with a 2x and 4x objective and a pair of 10x wide field eyepieces. The interpupillary distance and diopter adjustment are individually adjustable. The microscope is supplied with a dust cover and 5 prepared slides.",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Adapter (LEN)",
                            product_price = 100,
                            product_quantity = 10,
                            product_type = "Scientific"
                        },
                        new
                        {
                            product_id = 6,
                            product_description = "Description1",
                            product_img = "https://www.bresser.de/out/pictures/generated/product/1/380_340_75/8851000_1.jpg",
                            product_name = "Course 1",
                            product_price = 30,
                            product_quantity = 10,
                            product_type = "Education"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("user_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_fullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c0d03fd-a7db-4351-8faa-a97d363973bf",
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELOE7Aw8ggUghKl+2lYebfHHvdrDH/7zDtneMXi2P9VGR6XI6uaaco5r5vWGiwvNJA==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "0d4902ee-f46c-44b0-818f-b254c1fb8b96",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            user_fullName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8386a334-498b-40ff-975e-6ee541556023",
                            Email = "phat@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDU5vl3j/6Kyi6vp325tV7wJ6dTh+QiRPIrTGsNgVQpUuslSqgJibqCAC9Xru/31UA==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "b514c836-ead0-430d-bb0d-7f2fe907f062",
                            TwoFactorEnabled = false,
                            UserName = "phat",
                            user_fullName = "Ngo Thinh Phat"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e7fdfb8-6ca9-45c3-8a4b-08c8f7f1f19f",
                            Email = "khai@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIW2RGGnRTxDOuffIE6RYihM4+z5BNTE+k/ENRY+PilXBbouR3LloES7LNnQUR3LSA==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "a4ca0e3c-9ca6-41ec-850f-9d72ef286bb2",
                            TwoFactorEnabled = false,
                            UserName = "khai",
                            user_fullName = "Bui Tuan Khai"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e560ce-c0d5-4749-be4b-d8c58fcf29e9",
                            Email = "tram@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECphPAqeLlV9CALh9HmWrtFNd+HuWPf2nujtWFID1HqEaqEAxol9teBuMT4909lN9w==",
                            PhoneNumberConfirmed = false,
                            Role = "Member",
                            SecurityStamp = "6e1f3ae0-2a3a-4b75-9a64-0326dc142fc3",
                            TwoFactorEnabled = false,
                            UserName = "tram",
                            user_fullName = "Tran Bao Huyen Tram"
                        });
                });

            modelBuilder.Entity("PJ_SEM03.Models.Education", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("edu_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("edu_id")
                        .HasColumnType("int");

                    b.Property<string>("edu_subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edu_teacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Medical", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("med_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("med_id")
                        .HasColumnType("int");

                    b.Property<string>("med_sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("med_uses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Medicals", (string)null);
                });

            modelBuilder.Entity("PJ_SEM03.Models.Scientific", b =>
                {
                    b.HasBaseType("PJ_SEM03.Models.Product");

                    b.Property<string>("sci_brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sci_id")
                        .HasColumnType("int");

                    b.Property<string>("sci_uses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Scientifics", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Cart", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PJ_SEM03.Models.CartItem", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PJ_SEM03.Models.CartItems", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Feedback", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.HasOne("PJ_SEM03.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PJ_SEM03.Models.OrderDetail", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PJ_SEM03.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Education", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Education", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Medical", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Medical", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Scientific", b =>
                {
                    b.HasOne("PJ_SEM03.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("PJ_SEM03.Models.Scientific", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PJ_SEM03.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PJ_SEM03.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PJ_SEM03.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
